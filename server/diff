diff --git a/server/ChatManager.cpp b/server/ChatManager.cpp
index 3c082ab..0ff5634 100644
--- a/server/ChatManager.cpp
+++ b/server/ChatManager.cpp
@@ -1,4 +1,5 @@
 #include "ChatManager.h"
+#include "Log.h"
 
 using namespace std;
 
@@ -20,14 +21,14 @@ void chat_manager_t::on_read(int fd, short ev, void* arg)
         net_packet read_packet;
         read_packet.head = *(net_packet_head*)buf_head;
         // read net_packet_body
-        char* buf_body = new char[read_packet.head.body_size];
+        char *buf_body = new char[read_packet.head.body_size];
         memset(buf_body, 0, sizeof(buf_body));
         read_body_ret = read(fd, buf_body, read_packet.head.body_size);
         if(read_body_ret > 0)
         {
             if(read_packet.head.m_packet_type == NAME)
             {
-                event* write_ev = (struct event*) malloc(sizeof(struct event));
+                event *write_ev = (struct event*) malloc(sizeof(struct event));
                 event_set(write_ev, fd, EV_WRITE, on_recv_name, buf_body);
                 event_base_set(g_ev_base, write_ev);
                 event_add(write_ev, NULL);
@@ -36,7 +37,7 @@ void chat_manager_t::on_read(int fd, short ev, void* arg)
             else
             {
                 char receiver[11];
-                char* msg_ptr;
+                char *msg_ptr;
                 msg_ptr = strchr(buf_body, ':');
                 if(msg_ptr == NULL)
                 {
@@ -49,7 +50,6 @@ void chat_manager_t::on_read(int fd, short ev, void* arg)
                 strncpy(receiver, buf_body, msg_ptr - buf_body);
                 receiver[msg_ptr - buf_body] = '\0'; 
                 string sender = g_sock_name[fd];
-                delete buf_body;
                 if(read_packet.head.m_packet_type == ALL)
                 {
                     sender = sender + ": " + (msg_ptr + 1) + " (in a chat room)";
@@ -86,6 +86,7 @@ void chat_manager_t::on_read(int fd, short ev, void* arg)
                 */
             }
         }
+        delete buf_body;
     }
     if(read_head_ret <= 0 || read_body_ret <= 0)
     {
@@ -98,7 +99,7 @@ void chat_manager_t::on_read(int fd, short ev, void* arg)
 void chat_manager_t::on_write(int fd, short ev, void* arg)
 {
     cout << "on_write begin." << "fd = " << fd << endl;
-    char* buf = (char*)arg; 
+    char *buf = (char*)arg; 
     map<int, string> tmp(g_sock_name);
     tmp.erase(fd);    // remove sender fd (do not send to self)  
     for(map<int,string>::iterator it = tmp.begin(); it != tmp.end(); it++)
@@ -125,7 +126,7 @@ int chat_manager_t::packet_write(int fd, string& body_, packet_type type_)
 int chat_manager_t::packet_write(int fd, void* body_, packet_type type_)
 {
     cout << "packet_write begin." << "fd = " << fd << endl;
-    char* buf = (char*) body_;
+    char *buf = (char*) body_;
     net_packet write_packet;
     write_packet.head.body_size = strlen(buf);
     write_packet.head.m_packet_type = type_;
@@ -139,7 +140,7 @@ int chat_manager_t::packet_write(int fd, void* body_, packet_type type_)
 void chat_manager_t::on_recv_name(int fd, short ev, void* arg)
 {
     cout << "on_recv_name begin." << "fd = " << fd << endl;
-    char* name = (char*)arg; 
+    char *name = (char*)arg; 
     if(g_name_sock.find(name) == g_name_sock.end())
     {
         g_sock_name[fd] = name;
@@ -173,10 +174,11 @@ void chat_manager_t::accept_cli(int fd, short ev, void* arg)
     cli_addr_len = sizeof(cli_addr);
     int cli_fd = accept(fd, (struct sockaddr *)&cli_addr, &cli_addr_len);
     cout << "port:" << ntohs(cli_addr.sin_port) << "; current connect fd = " << cli_fd << "; connected number = " << g_sock_name.size() + 1 << endl;
-    log::log_current_time();
+    //log::log_current_time();
+    //Log::c_log(); 
     g_sock_name[cli_fd] = "";
 
-    event* read_ev = (struct event*)malloc(sizeof(struct event));
+    event *read_ev = (struct event*)malloc(sizeof(struct event));
     event_set(read_ev, cli_fd, EV_READ | EV_PERSIST, on_read, read_ev);
     event_base_set(g_ev_base, read_ev);
     event_add(read_ev, NULL);
